1
00:00:00,000 --> 00:00:02,640
假设这个仓库有 3 个 commit

2
00:00:02,640 --> 00:00:06,890
master 分支指向了最后提交的 commit

3
00:00:06,889 --> 00:00:11,824
注意 这些 commit 的方向并不重要

4
00:00:11,824 --> 00:00:14,724
通常我都水平显示这些 commit

5
00:00:14,724 --> 00:00:16,859
但是现在需要转换为垂直方向

6
00:00:16,859 --> 00:00:19,945
这样才能显示所有必要信息

7
00:00:19,945 --> 00:00:21,655
这个仓库不属于我们

8
00:00:21,655 --> 00:00:23,310
它是属于其他开发者的

9
00:00:23,309 --> 00:00:25,625
因此我们决定 fork 它

10
00:00:25,625 --> 00:00:27,859
记住 我们在 fork 仓库时

11
00:00:27,859 --> 00:00:30,079
创建的是完全相同的副本

12
00:00:30,079 --> 00:00:31,459
因此这两个仓库将具有完全相同的 commit

13
00:00:31,460 --> 00:00:35,674
它们的分支也会指向相同的 commit

14
00:00:35,674 --> 00:00:39,848
要创建 Pull Request 我们需要在我们的 fork 副本中添加新的 commit

15
00:00:39,848 --> 00:00:42,934
因此将我们的 fork 副本克隆到本地机器上

16
00:00:42,935 --> 00:00:48,020
我们创建一个 BUGFIX 分支并提交几个 commit 来修复错误

17
00:00:48,020 --> 00:00:51,830
然后将 BUGFIX 分支推送到我们的 fork 副本上

18
00:00:51,829 --> 00:00:56,140
以让这些新的 commit 出现在远程仓库上

19
00:00:56,140 --> 00:00:58,049
我们通过将更改推送至我们的 fork 副本上

20
00:00:58,049 --> 00:01:00,824
做好了 Pull Request 的所有准备工作

21
00:01:00,825 --> 00:01:04,075
现在我们将真正创建 Pull Request 

22
00:01:04,075 --> 00:01:06,859
稍后我们将了解如何在 GitHub 上执行这一操作

23
00:01:06,859 --> 00:01:10,929
如果 Pull Request 被原始仓库的维护者接受了

24
00:01:10,929 --> 00:01:13,924
commit 将被添加到他们的仓库中

25
00:01:13,924 --> 00:01:17,700
创建一个合并 commit 以将我们的新 commit

26
00:01:17,700 --> 00:01:20,100
与他们的现有 commit 合并

27
00:01:20,099 --> 00:01:24,000
他们的 master 分支将使指针移到这个新的合并 commit 上

